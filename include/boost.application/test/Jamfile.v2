#
#          Copyright Renato Tegon Forti 2011 - 2013.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)
#

# For more information, see http://www.boost.org

# bring in rules for testing
import testing ;
import os ;

if [ os.name ] = SOLARIS
{
    lib socket ;
    lib nsl ;
}
else if [ os.name ] = NT
{
    lib ws2_32 ;
    lib mswsock ;
    lib ole32 ;   # CoTaskMemFree
    lib shell32 ; # SHGetKnownFolderPath
}
else if [ os.name ] = HPUX
{
    lib ipv6 ;
}

project
    : source-location .
    : requirements
        <threading>multi

    # includes
        <include>../../..
        <include>../../../../type_index

    # preprocessor definitions
        <define>BOOST_ALL_NO_LIB
        <define>BOOST_LIB_DIAGNOSTIC
        <link>shared:<define>BOOST_ALL_DYN_LINK

    # windows
        <os>NT:<define>_WIN32_WINNT=0x0600
        <os>NT:<library>ole32
        <os>NT:<library>shell32

    # msvc
        <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
        <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
        <toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS
        <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
        <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS

    # linux
        <target-os>linux:<linkflags>"-ldl" 

    # mingw, cygwin
        <os>NT,<toolset>gcc:<library>ws2_32
        <os>NT,<toolset>gcc:<library>mswsock
        <os>NT,<toolset>gcc-cygwin:<define>__USE_W32_SOCKETS
        # <os>NT,<toolset>gcc:<linkflags>"-ldl" 
  
    # solaris     
        <os>SOLARIS:<library>socket
        <os>SOLARIS:<library>nsl
      
    # hpux  
        <os>HPUX,<toolset>gcc:<define>_XOPEN_SOURCE_EXTENDED
        <os>HPUX:<library>ipv6

    # gcc
        <toolset>gcc:<cxxflags>-fno-strict-aliasing  # avoids strict aliasing violations in other Boost components

    # others
        <library>/boost/system//boost_system
        <library>/boost/program_options//boost_program_options
        <library>/boost/filesystem//boost_filesystem
        <library>/boost/date_time//boost_date_time
        <library>/boost/thread//boost_thread
        <library>/boost/regex//boost_regex
        <library>/boost/atomic//boost_atomic
    ;

rule app-test ( sources + )
{
    return
    [
        run $(sources)
        : # args
        : # input files
        : # requirements
            # the test execution monitor requires static linkage
            # if libraries used by it, are also used by the test project
            <link>static
            <library>/boost/test//boost_test_exec_monitor
    ] ;
}

rule app-unit-test ( sources + )
{
    return
    [
        run $(sources)
        : # args
        : # input files
        : # requirements
            <library>/boost/test//boost_unit_test_framework
    ] ;
}

rule app-example ( sources )
{
    return [ compile $(sources) ] ;
}

test-suite application
    : 
        #
        # application foundation
        #
        # [ run aspect_map_test.cpp ] --> TODO, fix, rmoved to test travis
        # 
        # [ run signal_binder_test.cpp : : : <link>shared ] --> TODO, fix crashes on windows
        [ app-test handler_test.cpp ]
        [ app-test launch_test.cpp ]
        [ app-test ensure_single_instance_test.cpp ]
        [ app-unit-test global_context_test.cpp ]
        #
        #

        #
        # translation unit test
        #
        [ app-test tunit_test.cpp myapp.cpp ]
        #
        #

        #
        # common application
        #
        [ app-test simple_common_application_test.cpp ]
        #
        #

        #
        # server application
        #
        [ app-test simple_server_application_test.cpp ]
        #
        #

        #
        # auto handler
        #
        [ app-test auto_handler_test.cpp ]
        # [ app-test auto_handler_global_context_test.cpp ] --> TODO, fix bugs
        #
        #

        #
        # auto app (in dev)
        #
        # [ app-test auto_app_test.cpp ]
        #
        #

        #
        # aspects
        #
        [ app-test args_aspect_test.cpp ]
        [ app-test path_aspect_test.cpp ]
        #
        #
        
        # running setup without arguments will result in test failure.
        # [ run ../example/setup/windows/setup.cpp : : : <build>no <target-os>windows:<build>yes ]
        #
    ;

build-project ../example ;
